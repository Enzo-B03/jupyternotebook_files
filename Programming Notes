I'll be keeping all my notes here about python and maybe for all other programming languages that I'll encounter.



###### The syntax for selecting part of the dataframe that satisfies your condition is:
    df[df[colname] > some_number]

df.interpolate is awesome!
here's an example implementation:
    df.interpolate(method='linear', limit_direction='forward', axis=0)
    
    
r'C:\\ ..... --> the r here means 'raw'. you can use raw('type address here'). the purpose is so that the text captures all the file path you put in including the \\

use of np.where

df_comb['105FT002AB_PV'] = np.where(df_comb['105TK01_H2S_FR_A']>df_comb['105TK01_H2S_FR_B'],\
                                    df_comb['105TK01_H2S_FR_A'], df_comb['105TK01_H2S_FR_B']) 
                                    
                                    
#----7/23/2020
Using scikitlearn linear reg for single feature

X = dataset['MinTemp'].values.reshape(-1,1)
y = dataset['MaxTemp'].values.reshape(-1,1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

regressor = LinearRegression()  
regressor.fit(X_train, y_train) #training the algorithm

#To retrieve the intercept:
print(regressor.intercept_)
#For retrieving the slope:
print(regressor.coef_)

y_pred = regressor.predict(X_test)

df = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})
df

plt.scatter(X_test, y_test,  color='gray')
plt.plot(X_test, y_pred, color='red', linewidth=2)
plt.show()

#----Appending df's
sample
df3 = jun.append([jul, may], ignore_index=False)
#----Sorting index
dataframe. sort_index()


#---------dropping rows using .loc
df.drop(df.loc[df.time< df.time.shift()].index, inplace=True)
example:
df.drop(df.loc['2020-03-20 06:00:00':'2020-04-15 06:00:00'].index)


#------------plotly markers and lines----------------------
choosing to plot using lines or dots can be done with mode. See example.
# Add traces
fig.add_trace(go.Scatter(x=random_x, y=random_y0,
                    mode='markers',
                    name='markers'))
fig.add_trace(go.Scatter(x=random_x, y=random_y1,
                    mode='lines+markers',
                    name='lines+markers'))
fig.add_trace(go.Scatter(x=random_x, y=random_y2,
                    mode='lines',
                    name='lines'))

#------------dropping duplicates in a row ----
df = df.drop_duplicates(subset='favorite_color', keep="first")


#------------plotting in plotly express
#
# this is a sample of generating the trace
figNTRL.add_trace(go.Scatter(x=NTRL['104_FT'].index, 
                             y=NTRL['104_FT'], marker_symbol='circle-open',
                             marker_line_width=0.8, marker_size=5, opacity = 0.8,
                             name='104_NUT', 
                             mode = 'markers'), secondary_y=True,)
                             
                             
# adding a range slider below the graph in plotly
Example:

fig_acid.update_layout(title_text=title_plotAcid,xaxis=dict(rangeslider=dict(visible = True),type='date'))

#-----------                             

#---------------plotly pie plots------------------------------
# sample of pie plot
#labels_flocc = ['ORE','CCD_MS']
#figfloc.add_trace(go.Pie(labels=labels_flocc,
#                         values = Flocc_SD_df[['Floc_(ORE)','Floc_(CCD_MS)']].dropna(how='any').iloc[-1],
#                         textinfo='label+percent',
#                         insidetextorientation='radial', opacity=0.5
#                            ))

#-------------------------------------Changing jupyternotebook to dark mode--------------------------------------------------------------
jt -t monokai -f fira -fs 13 -nf ptsans -nfs 11 -N -kl -cursw 5 -cursc r -cellw 95% -T



#---------------------------------Plotly subplots----------------------------------------------------------------------------------------------------
#
from plotly.subplots import make_subplots
import plotly.graph_objects as go

fig = make_subplots(
    rows=5, cols=2,
    specs=[[{}, {"rowspan": 2}],
           [{}, None],
           [{"rowspan": 2, "colspan": 2}, None],
           [None, None],
           [{}, {}]],
    print_grid=True)

fig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name="(1,1)"), row=1, col=1)
fig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name="(1,2)"), row=1, col=2)
fig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name="(2,1)"), row=2, col=1)
fig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name="(3,1)"), row=3, col=1)
fig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name="(5,1)"), row=5, col=1)
fig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name="(5,2)"), row=5, col=2)

fig.update_layout(height=600, width=600, title_text="specs examples")
fig.show()

#
#------------------------------------------------------------------------------------------------------------------------------------------
#
#-------------------------------------Plotly accepted line color names---------------------------------------------------------------------------------------------------------------
#
#   The 'color' property is a color and may be specified as:
      - A hex string (e.g. '#ff0000')
      - An rgb/rgba string (e.g. 'rgb(255,0,0)')
      - An hsl/hsla string (e.g. 'hsl(0,100%,50%)')
      - An hsv/hsva string (e.g. 'hsv(0,100%,100%)')
      - A named CSS color:
            aliceblue, antiquewhite, aqua, aquamarine, azure,
            beige, bisque, black, blanchedalmond, blue,
            blueviolet, brown, burlywood, cadetblue,
            chartreuse, chocolate, coral, cornflowerblue,
            cornsilk, crimson, cyan, darkblue, darkcyan,
            darkgoldenrod, darkgray, darkgrey, darkgreen,
            darkkhaki, darkmagenta, darkolivegreen, darkorange,
            darkorchid, darkred, darksalmon, darkseagreen,
            darkslateblue, darkslategray, darkslategrey,
            darkturquoise, darkviolet, deeppink, deepskyblue,
            dimgray, dimgrey, dodgerblue, firebrick,
            floralwhite, forestgreen, fuchsia, gainsboro,
            ghostwhite, gold, goldenrod, gray, grey, green,
            greenyellow, honeydew, hotpink, indianred, indigo,
            ivory, khaki, lavender, lavenderblush, lawngreen,
            lemonchiffon, lightblue, lightcoral, lightcyan,
            lightgoldenrodyellow, lightgray, lightgrey,
            lightgreen, lightpink, lightsalmon, lightseagreen,
            lightskyblue, lightslategray, lightslategrey,
            lightsteelblue, lightyellow, lime, limegreen,
            linen, magenta, maroon, mediumaquamarine,
            mediumblue, mediumorchid, mediumpurple,
            mediumseagreen, mediumslateblue, mediumspringgreen,
            mediumturquoise, mediumvioletred, midnightblue,
            mintcream, mistyrose, moccasin, navajowhite, navy,
            oldlace, olive, olivedrab, orange, orangered,
            orchid, palegoldenrod, palegreen, paleturquoise,
            palevioletred, papayawhip, peachpuff, peru, pink,
            plum, powderblue, purple, red, rosybrown,
            royalblue, rebeccapurple, saddlebrown, salmon,
            sandybrown, seagreen, seashell, sienna, silver,
            skyblue, slateblue, slategray, slategrey, snow,
            springgreen, steelblue, tan, teal, thistle, tomato,
            turquoise, violet, wheat, white, whitesmoke,
            yellow, yellowgreen

#------------------------------------Plotly chart improvement tip: adding vertical spikelines------------------------------------------------------------------------------
#
# Build graph
layout = go.Layout(
    title="Performance of A vs. B",
    plot_bgcolor="#FFFFFF",
    hovermode="x",
    hoverdistance=100, # Distance to show hover label of data point
    spikedistance=1000, # Distance to show spike
    xaxis=dict(
        title="time",
        linecolor="#BCCCDC",
        showspikes=True, # Show spike line for X-axis
        # Format spike
        spikethickness=2,
        spikedash="dot",
        spikecolor="#999999",
        spikemode="across",
    ),
    yaxis=dict(
        title="price",
        linecolor="#BCCCDC"
    )
)
#
#-----------------------------------Plotly rotating the xaxis labels to 90 degrees------------------------------------------------------------------------------
# Sample code for rotating the x-axis of a plot
plt.plot(df_pu01_flow_and_date.index, df_pu01_flow_and_date['105PU01A_FLOW'])
plt.xticks(rotation=90)
plt.show()
#
#